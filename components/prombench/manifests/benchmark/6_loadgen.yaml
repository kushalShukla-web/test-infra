apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-loadgen
  namespace: prombench-{{ .PR_NUMBER }}
data:
  config.yaml: |
    querier:
      groups:
      - name: simple_range
        interval: 2s
        type: range
        start: 2h
        end: 1h
        step: 15s
        queries:
        - expr: go_goroutines
        - expr: container_memory_rss
        - expr: kube_pod_container_info
        - expr: codelab_api_http_requests_in_progress
        - expr: codelab_api_requests_total
      - name: aggr_instant
        interval: 5s
        type: instant
        queries:
        - expr: sum by(image) (container_memory_rss)
        - expr: sum by(instance) (rate(node_cpu{mode!="idle"}[5m]))
        - expr: sum by(instance) (rate(node_cpu[5m]))
        - expr: sum by(instance) (rate(codelab_api_requests_total[5m]))
        - expr: sum by(instance) (rate(codelab_api_requests_total{method=~"GET|POST"}[5m]))
      - name: aggr_range
        interval: 10s
        type: range
        start: 1h
        end: 0h
        step: 15s
        queries:
        - expr: sum by(image) (container_memory_rss)
        - expr: sum by(instance) (rate(node_cpu{mode!="idle"}[5m]))
        - expr: sum by(instance) (rate(node_cpu[5m]))
        - expr: sum by(instance) (rate(codelab_api_requests_total[5m]))
        - expr: sum by(instance) (rate(codelab_api_requests_total{method=~"GET|POST"}[5m]))
      - name: heavy_instant
        interval: 10s
        queries:
        - expr: rate(codelab_api_requests_total{method=~"GET|POST"}[5m])
        - expr: sum without(instance) (rate(codelab_api_requests_total{method=~"GET|POST"}[5m]))
        - expr: histogram_quantile(0.99, sum by(path, le) (rate(codelab_api_request_duration_seconds_bucket{method="POST"}[5m])))
        - expr: histogram_quantile(0.99, sum by(path, method, le) (rate(codelab_api_request_duration_seconds_bucket{method="POST"}[5m])))
        - expr: histogram_quantile(0.99, sum by(instance, le) (rate(codelab_api_request_duration_seconds_bucket{method="POST"}[5m])))
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-loadgen-scaler
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loadgen-scaler
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: loadgen-scaler
    spec:
      serviceAccountName: loadgen-scaler
      containers:
      - name: prom-load-generator
        image: docker.io/prombench/scaler:2.0.0
        imagePullPolicy: Always
        args:
        - "scale"
        - "-f"
        - "/etc/scaler/webserver.yaml"
        - "-v"
        - "PR_NUMBER:{{ .PR_NUMBER }}"        #Used to specify fake-webserver's namespace
        - "20"                                #Scale Up replicas
        - "1"                                 #Scale Down replicas
        - "15m"                               #Sleep Interval between scaling
        volumeMounts:
        - name: webserver-config-volume
          mountPath: /etc/scaler
      volumes:
      - name: webserver-config-volume
        configMap:
          name: fake-webserver-config-for-scaler
      nodeSelector:
        cloud.google.com/gke-nodepool: nodes-{{ .PR_NUMBER }}
        isolation: none
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-loadgen-querier
  namespace: prombench-{{ .PR_NUMBER }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loadgen-querier
  template:
    metadata:
      namespace: prombench-{{ .PR_NUMBER }}
      labels:
        app: loadgen-querier
    spec:
      initContainers:
      - name: check-prometheus-health
        image: alpine:3.8
        command: ['sh', '-c', 'apk add --no-cache curl &&
                  for i in `seq 1 30`; do
                    echo "Trial #$i";sleep 2;
                    replyPR=$(curl -s -o /dev/null -w %{http_code} http://prombench.prometheus.io/{{ .PR_NUMBER }}/prometheus-pr/-/healthy);
                    if [ "$replyPR" -ne "200" ]; then exit 1; fi;
                    replyRelease=$(curl -s -o /dev/null -w %{http_code} http://prombench.prometheus.io/{{ .PR_NUMBER }}/prometheus-release/-/healthy);
                    if [ "$replyRelease" -ne "200" ]; then exit 1; fi;
                    echo "Both prometheus servers (/{{ .PR_NUMBER }}/prometheus-pr & /{{ .PR_NUMBER }}/prometheus-release) are healthy.";
                    exit 0;
                  done'
      ]
      containers:
      - name: prom-load-generator
        image: docker.io/prombench/load-generator:2.0.0
        imagePullPolicy: Always
        args:
        - "querier"
        - "prombench-{{ .PR_NUMBER }}"
        - "{{ .PR_NUMBER }}"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/loadgen
        ports:
        - name: loadgen-port
          containerPort: 8080
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-loadgen
      nodeSelector:
        cloud.google.com/gke-nodepool: nodes-{{ .PR_NUMBER }}
        isolation: none
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-loadgen-querier
  namespace: prombench-{{ .PR_NUMBER }}
  labels:
    app: loadgen-querier
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: prometheus
    port: 80
    targetPort: loadgen-port
  selector:
    app: loadgen-querier