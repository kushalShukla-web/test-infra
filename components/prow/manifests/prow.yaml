apiVersion: v1
kind: ServiceAccount
metadata:
  name: "deck"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "deck"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "deck"
subjects:
- kind: ServiceAccount
  name: "deck"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "deck"
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "horologium"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "horologium"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "horologium"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "horologium"
subjects:
- kind: ServiceAccount
  name: "horologium"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "plank"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "plank"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - list
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "plank"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "plank"
subjects:
- kind: ServiceAccount
  name: "plank"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "sinker"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "sinker"
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - delete
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "sinker"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "sinker"
subjects:
- kind: ServiceAccount
  name: "sinker"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: plugins
data:
  plugins.yaml: |
    plugins:
      sipian/prometheus:
      - benchmark
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
data:
  config.yaml: |
    periodics:
    - interval: 10m
      agent: kubernetes
      name: echo-test
      spec:
        containers:
        - image: alpine
          command: ["/bin/date"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hook
  labels:
    app: hook
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hook
  template:
    metadata:
      labels:
        app: hook
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: hook
        image: gcr.io/prometheus-test-204522/hook:v20180702-stat-613-g697eb617c
        imagePullPolicy: Always
        args:
        - --dry-run=false
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: hmac
          mountPath: /etc/webhook
          readOnly: true
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: plugins
          mountPath: /etc/plugins
          readOnly: true
      volumes:
      - name: hmac
        secret:
          secretName: hmac-token
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
      - name: plugins
        configMap:
          name: plugins
      nodeSelector:
        cloud.google.com/gke-nodepool: prow
---
apiVersion: v1
kind: Service
metadata:
  name: hook
spec:
  selector:
    app: hook
  ports:
  - port: 8888
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plank
  labels:
    app: plank
spec:
  replicas: 1 # Do not scale up.
  selector:
    matchLabels:
      app: plank
  template:
    metadata:
      labels:
        app: plank
    spec:
      serviceAccountName: "plank"
      containers:
      - name: plank
        image: gcr.io/k8s-prow/plank:v20180627-ea5075d37
        args:
        - --dry-run=false
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: config
        configMap:
          name: config
      nodeSelector:
        cloud.google.com/gke-nodepool: prow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sinker
  labels:
    app: sinker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sinker
  template:
    metadata:
      labels:
        app: sinker
    spec:
      serviceAccountName: "sinker"
      containers:
      - name: sinker
        image: gcr.io/k8s-prow/sinker:v20180627-ea5075d37
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      nodeSelector:
        cloud.google.com/gke-nodepool: prow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deck
  labels:
    app: deck
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: deck
  template:
    metadata:
      labels:
        app: deck
    spec:
      serviceAccountName: "deck"
      terminationGracePeriodSeconds: 30
      containers:
      - name: deck
        image: gcr.io/k8s-prow/deck:v20180627-ea5075d37
        args:
        - --hook-url=http://hook:8888/plugin-help
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      nodeSelector:
        cloud.google.com/gke-nodepool: prow
---
apiVersion: v1
kind: Service
metadata:
  name: deck
spec:
  selector:
    app: deck
  ports:
  - port: 80
    targetPort: 8080
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: horologium
  labels:
    app: horologium
spec:
  replicas: 1
  selector:
    matchLabels:
      app: horologium
  template:
    metadata:
      labels:
        app: horologium
    spec:
      serviceAccountName: "horologium"
      terminationGracePeriodSeconds: 30
      containers:
      - name: horologium
        image: gcr.io/k8s-prow/horologium:v20180627-ea5075d37
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: config
      nodeSelector:
        cloud.google.com/gke-nodepool: prow
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ing
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: deck
          servicePort: 80
      - path: /pr
        backend:
          serviceName: deck
          servicePort: 80
      - path: /command-help
        backend:
          serviceName: deck
          servicePort: 80
      - path: /tide
        backend:
          serviceName: deck
          servicePort: 80
      - path: /plugins
        backend:
          serviceName: deck
          servicePort: 80
      - path: /log
        backend:
          serviceName: deck
          servicePort: 80          
      - path: /hook
        backend:
          serviceName: hook
          servicePort: 8888
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-prometheus-meta
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: prometheus-meta
          servicePort: 9090
        path: /prometheus-meta     
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-grafana
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: grafana
          servicePort: 3000
        path: /grafana